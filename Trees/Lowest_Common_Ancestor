//To find Lowest Common Ancestor





#include<iostream>
#include<queue>

using namespace std;


struct node
{
    int data;
    node* left;
    node* right;
};


node* get_node(node* root,int data)
{
    node* temp = new node;
    temp->data = data;
    temp->right  = NULL;
    temp->left = NULL;
    return temp;
}


node* insert(node* root, int data)
{
    if(root==NULL)
    {
        root = get_node(root,data);
        return root;
    }
    else if(root->data<=data)
    {
        root->right = insert(root->right,data);
        return root;
    }
    
    else if(root->data>=data)
    {
        root->left = insert(root->left,data);
        return root;
    }
    
}


node* lowest_common_ancestor(node* root,int num1,int num2)
{
    
    
    if(num1>root->data && num2>root->data)
    {
        lowest_common_ancestor(root->right,num1,num2);
    }
    if(num1<root->data && num2<root->data)
    {
        lowest_common_ancestor(root->left,num1,num2);
    }
    else
    {
            return root;
    }
    

}



int main()
{
    node* root = NULL;
    root = insert(root,40);
    root = insert(root,60);
    root = insert(root,20);
    root = insert(root,10);
    root = insert(root,80);
    root = insert(root,74);
    root = insert(root,8);
    root = insert(root,28);
    int num1,num2;
    cin>>num1>>num2;
    node* lca = lowest_common_ancestor(root,num1,num2);
    cout<<lca->data;
    
}
