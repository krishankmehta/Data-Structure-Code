//To swap two nodes in a linked list



#include<iostream>

using namespace std;

struct Node
{
    int data;
    Node *next;
};

void initnode(Node* head,int n)
{

    head->data=n;
    head->next=NULL;
}


void nodefind(Node * head,int a)
{
    Node* cur=head;
    int count =0;
    while(cur)
    {
        if(count==a)
        {
            cout<<cur->data<<" "<<endl;
        }
        cur=cur->next;
        ++count;
    }


}

void addnode(Node* head,int n)
{
    Node *newnode= new Node;
    newnode->data=n;
    newnode->next=NULL;
    Node* cur=head;
    while(cur)
    {
        if(cur->next==NULL)
        {
            cur->next=newnode;
            return;
        }
        cur=cur->next;
    }

}

void display(Node *head)
{
    Node *cur=head;
    while(cur)
    {
        cout<<cur->data<<" ";
        cur=cur->next;
    }
    cout<<endl<<endl;
}

void swap(Node* head,int n1,int n2)
{
    if(n1==n2)
    {
        return;
    }
    Node* n1_present;
    Node* n1_next;
    Node* n1_previous = head;
    Node* n2_present;
    Node* n2_next;
    Node* n2_previous = head;
    Node* curr = head;
        while(curr->data!=n1)
        {
            curr=curr->next;
        }
        while(n1_previous->next!=curr)
        {
            n1_previous = n1_previous->next;
        }
        n1_present = curr;
        n1_next = curr->next;
        
        while(curr->data!=n2)
        {
            curr=curr->next;
        }
         while(n2_previous->next!=curr)
        {
            n2_previous = n2_previous->next;
        }
        n2_present = curr;
        n2_next = curr->next;
        
        n1_previous->next = n2_present;
        n2_present->next = n1_next;
        n2_previous->next = n1_present;
        n1_present->next = n2_next;
        
    
}


int main ()
{
    Node* head = new Node;
    initnode(head,10);
    addnode(head,20);
    addnode(head,30);
    addnode(head,40);
    addnode(head,50);
    addnode(head,60);
    addnode(head,70);
    addnode(head,80);
    swap(head,20,70);
    display(head);
}
